#!/usr/bin/env python
import argparse
import os

from sentrylogs.nginx import nginx

def main():
    p = argparse.ArgumentParser(description='Send logs to Django Sentry.')

    p.add_argument('--follow', '-f', default="all", help='Which logs to follow, default ALL')
    p.add_argument('--sentrydsn', '-s', default="", help='The Sentry DSN string')
    p.add_argument('--daemonize', '-d',  action='store_const', const=True, default=False, help='Run this script in background')
    p.add_argument('--calltime', '-c',  action='store_const', const=True, default=False, help='Add Call Time Parsing')
    p.add_argument('--nginxerrorpath', '-e', default=False, help='Nginx error log path')
    p.add_argument('--nginxaccesspath', '-a', default=False, help='Nginx access log path')
    p.add_argument('--pidfile', '-p', default=None, help='Daemon PID File Location')
    p.add_argument('--basepath', '-b', default="http://localhost:5000", help='Base Path to URL')
    p.add_argument('--parsehistory', '-i', action='store_const', const=True, default=False, help='Parse Historical Log Data')

    options = p.parse_args()

    print 'Start sending %s logs to Sentry' % options.follow
    if options.sentrydsn:
        print "Using the DSN %s" % options.sentrydsn
    if options.nginxerrorpath:
        print "Using the Nginx error log path %s" % options.nginxerrorpath
        nginx_error_path = options.nginxerrorpath
    if options.nginxaccesspath:
        print "Using the Nginx access log path %s" % options.nginxaccesspath
        nginx_access_path = options.nginxaccesspath
    if options.calltime:
        print "Logging Call Time"
    if options.parsehistory:
        print "Parsing Historical Logs"
    elif options.daemonize:
        print "Process running in background"
        from sentrylogs.daemonize import createDaemon
        createDaemon(pid_file=options.pidfile)

    nginx(options)

if __name__ == '__main__':
    main()
